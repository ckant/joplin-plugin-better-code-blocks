import { Doc } from "codemirror"

import { nil } from "@ext/stdlib/existence"

import { CompletionGenerator } from "@cm-extension/completer/CompletionGenerator"
import { Origin } from "@cm-extension/model/Origin"

export interface CompleterProps {
  readonly completionGenerator: CompletionGenerator
}

/**
 * Automatically completes code fences using completions generated by {@link completionGenerator}.
 *
 * e.g. given the following incomplete code fence (with the cursor at the end of the line):
 * <pre>
 * ~~~typescript
 * </pre>
 *
 * the completed code fence is as follows (with the cursor moved inside the fence):
 * <pre>
 * ~~~typescript
 *
 * ~~~
 * </pre>
 */
export class Completer {
  private readonly completionGenerator: CompletionGenerator

  static create(props: CompleterProps): Completer {
    return new Completer(props)
  }

  private constructor(props: CompleterProps) {
    this.completionGenerator = props.completionGenerator
  }

  /**
   * Completes an incomplete code fence if one exists at the cursor in {@link doc}
   * and returns true if the completion succeeds.
   * The operation executes using the given {@link origin}.
   *
   * The completion "opens" the code fence with a new line and places the cursor inside.
   */
  complete(doc: Doc, origin: Origin): boolean {
    const completion = this.completionGenerator.generate(doc)
    if (nil(completion)) return false

    this.performCompletion(doc, completion, origin)
    return true
  }

  private performCompletion(doc: Doc, completion: string, origin: Origin): void {
    const cursor = doc.getCursor()
    const newLine = doc.lineSeparator()

    // Cursor is at the end of the start tag, so add 2 new lines to open and complete the fence
    doc.replaceRange(`${newLine}${newLine}${completion}`, cursor, undefined, origin)

    // Reposition cursor inside the new code fence
    doc.setCursor(cursor.line + 1, undefined, { origin })
  }
}
