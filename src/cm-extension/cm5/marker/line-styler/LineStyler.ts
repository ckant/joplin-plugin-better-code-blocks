import { Doc } from "codemirror"

import { Docs } from "@ext/codemirror/cm5/Docs"

import { LineStyle } from "@cm-extension/cm5/marker/line-styler/LineStyle"
import { LineStyleGenerator } from "@cm-extension/cm5/marker/line-styler/LineStyleGenerator"
import { Marker } from "@cm-extension/cm5/marker/Marker"
import { CodeBlock } from "@cm-extension/cm5/model/CodeBlock"

/**
 * A {@link LineStyle} that's later removable.
 */
interface RemovableLineStyle extends LineStyle {
  remove(): void
}

export interface LineStylerProps {
  readonly lineStyleGenerator: LineStyleGenerator
}

/**
 * Applies line classes generated by {@link lineStyleGenerator}.
 */
export class LineStyler implements Marker {
  private readonly lineStyleGenerator: LineStyleGenerator
  private lineStyles: readonly RemovableLineStyle[] = []

  static create(props: LineStylerProps): LineStyler {
    return new LineStyler(props)
  }

  private constructor(props: LineStylerProps) {
    this.lineStyleGenerator = props.lineStyleGenerator
  }

  /**
   * Adds line classes for lines within the given {@link codeBlocks} in the {@link doc}.
   *
   * Removes all previous line classes before adding new ones.
   */
  mark(doc: Doc, codeBlocks: readonly CodeBlock[]): void {
    this.updateLineStyles(doc, codeBlocks)
  }

  private updateLineStyles(doc: Doc, codeBlocks: readonly CodeBlock[]): void {
    const generatedLineStyles = this.lineStyleGenerator.generate(codeBlocks)

    this.lineStyles.forEach((it) => it.remove())

    this.lineStyles = generatedLineStyles.map((lineStyle) => {
      const handle = Docs.addLineClasses(doc, lineStyle.line, lineStyle)

      return {
        ...lineStyle,
        remove: () => Docs.removeLineClasses(doc, handle, lineStyle),
      }
    })
  }
}
